//---------------------------------------------------------------------------
#include <vcl.h>
#pragma hdrstop

#include "Unit1.h"
#include "Unit2.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;
//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
	: TForm(Owner)
{
	memoInputMatrixA->Text = "";
	memoInputMatrixB->Text = "";
	memoOutputMatrix->Text = "";
}
//---------------------------------------------------------------------------

template<typename data_type1>
const String TForm1::to_unicodeString(const data_type1& text) const
{
	String Str;

	stringstream s;
	s << text;
	string str = s.str();

	for (int i = 0; i < str.length(); i++) {
		Str += str[i];
	}

	return Str;
}

template<typename data_type2>
const void TForm1::print(const data_type2& text, TMemo* Memo) const
{
	Memo->Lines->Add(to_unicodeString(text));
}

void TForm1::endl()
{
	print("", memoOutputMatrix);
}

const string TForm1::to_str(const String& Str) const
{
	int String_Length = Str.Length();
	string str = "";

	for (int i = 1; i <= String_Length; i++) {
		str += Str[i];
	}

	return str;
}

vector<vector<double>> TForm1::inputMatrix(TMemo* Memo) const
{
	int num_of_rows = Memo->Lines->Count;
	double temp = NULL;
	String Str;
	string str;
	vector<double> vec;
	vector<vector<double>> matrix;

	for (int i = 0; i < num_of_rows; i++) {
		Str = Memo->Lines->Strings[i];
		for (int i = 1; i <= Str.Length(); i++) {
			str += Str[i];
			if (Str[i] == ' ' || i == Str.Length()) {
				stringstream s(str);
				s >> temp;
				if (temp != NULL)
					vec.push_back(temp);
				temp = NULL;
				str.clear();
			}
		}
		matrix.push_back(vec);
		vec.clear();
	}
	return matrix;
}

void TForm1::outputMatrix(const vector<vector<double>>& matrix, TMemo* Memo) const
{
	int num_of_rows = matrix.size();
	int num_of_columns = matrix[0].size();
	String Str;
	vector<string> vec_str;

	for (int i = 0; i < num_of_rows; i++) {
		stringstream s;
		for (int j = 0; j < num_of_columns; j++) {
			s << setw(24) << matrix[i][j];
		}
		if (!s.str().empty())
			vec_str.push_back(s.str());
	}

	for (int i = 0; i < num_of_rows; i++) {
		for (int j = 0; j < vec_str[i].length(); j++) {
			Str += vec_str[i][j];
		}
		if (!Str.IsEmpty())
			Memo->Lines->Add(Str);
		Str.~UnicodeString();
	}
}
//---------------------------------------------------------------------------

void __fastcall TForm1::cleanButtonAClick(TObject *Sender)
{
	memoInputMatrixA->Text = "";
}
//---------------------------------------------------------------------------

void __fastcall TForm1::rowEchelonButtonAClick(TObject *Sender)
{
	memoOutputMatrix->Text = "";
	vector<vector<double>> matrix;
	matrix = inputMatrix(memoInputMatrixA);
	functions* obj;
	obj->REF(matrix);
	print("The matrix in row-echelon form:", memoOutputMatrix);
	endl();
	outputMatrix(matrix, memoOutputMatrix);
}
//---------------------------------------------------------------------------

void __fastcall TForm1::reducedRowEchelonButtonAClick(TObject *Sender)
{
	memoOutputMatrix->Text = "";
	vector<vector<double>> matrix;
	matrix = inputMatrix(memoInputMatrixA);
	functions* obj;
	obj->RREF(matrix);
	print("The matrix in reduced row-echelon form:", memoOutputMatrix);
	endl();
	outputMatrix(matrix, memoOutputMatrix);
}
//---------------------------------------------------------------------------

void __fastcall TForm1::rankButtonAClick(TObject *Sender)
{
	memoOutputMatrix->Text = "";
	vector<vector<double>> matrix;
	matrix = inputMatrix(memoInputMatrixA);
	functions* obj;
	const int rank = obj->rank(matrix);
	print("The matrix in reduced row-echelon form:", memoOutputMatrix);
	endl();
	outputMatrix(matrix, memoOutputMatrix);
	endl();
	print("The matrix's rank is " + to_string(rank), memoOutputMatrix);
}
//---------------------------------------------------------------------------

void __fastcall TForm1::determinantButtonAClick(TObject *Sender)
{
	memoOutputMatrix->Text = "";
	vector<vector<double>> matrix;
	matrix = inputMatrix(memoInputMatrixA);
	functions* obj;
	const int determinant = obj->determinant(matrix);
	if (matrix.size() == matrix[0].size()) {
		print("The matrix in row-echelon form:", memoOutputMatrix);
		endl();
		outputMatrix(matrix, memoOutputMatrix);
		endl();
		print("A matrix in row-echelon form is also an upper triangular matrix.", memoOutputMatrix);
		print("Thus, the product of the diagonal elements is equal to its determinant.", memoOutputMatrix);
		endl();
		print("The matrix's determinant is " + to_string(determinant), memoOutputMatrix);
	} else {
		ShowMessage("The matrix is not invertible and does not have a determinant because the number of rows is not equal to the number of columns. In other words, the matrix is not a square matrix.");
	}
}
//---------------------------------------------------------------------------

void __fastcall TForm1::inverseButtonAClick(TObject *Sender)
{
	memoOutputMatrix->Text = "";
	vector<vector<double>> matrix;
	vector<vector<double>> identity_matrix;
	matrix = inputMatrix(memoInputMatrixA);
	if (matrix.size() == matrix[0].size()) {
		functions* obj;
		identity_matrix = obj->inverse(matrix);
		if (identity_matrix.size() == 1 && identity_matrix[0].size() == 1
			&& identity_matrix[0][0] == 2.718281828459045) {
			print("The matrix is not invertible because its reduced row-echelon form", memoOutputMatrix);
			print("is not the identity matrix.", memoOutputMatrix);
			print("The matrix in reduced row-echelon form:", memoOutputMatrix);
			endl();
			outputMatrix(matrix, memoOutputMatrix);
		} else {
			print("Inverse matrix:", memoOutputMatrix);
			endl();
			outputMatrix(identity_matrix, memoOutputMatrix);
		}
	} else {
		ShowMessage("The matrix is not invertible and does not have a determinant because the number of rows is not equal to the number of columns. In other words, the matrix is not a square matrix.");
	}
}
//---------------------------------------------------------------------------
