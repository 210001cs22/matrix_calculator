//---------------------------------------------------------------------------
#ifndef Unit1H
#define Unit1H
//---------------------------------------------------------------------------
#include <System.Classes.hpp>
#include <Vcl.Controls.hpp>
#include <Vcl.StdCtrls.hpp>
#include <Vcl.Forms.hpp>
#include <Vcl.ExtCtrls.hpp>
//---------------------------------------------------------------------------
#include <vector>
#include <string>
#include <sstream>
#include <iomanip>
#include <ustring.h>
using std::vector;
using std::string;
using std::stod;
using std::endl;
using std::setw;
using std::stringstream;
//---------------------------------------------------------------------------
class TForm1 : public TForm
{
__published:	// IDE-managed Components
	TButton *additionButton;
	TButton *subtractionButton;
	TButton *multiplicationButton;
	TMemo *memoOutputMatrix;
	TButton *swapmatricesButton;
	TComboBox *equationlistBox;
	TButton *equalsButton;
	TGroupBox *GroupBox1;
	TButton *cleanButtonA;
	TMemo *memoInputMatrixA;
	TButton *rowEchelonButtonA;
	TButton *reducedRowEchelonButtonA;
	TButton *determinantButtonA;
	TButton *rankButtonA;
	TButton *inverseButtonA;
	TButton *multiplyButtonA;
	TEdit *constantSelectionAEdit;
	TButton *powerButtonA;
	TEdit *powerSelectionAEdit;
	TButton *transposeButtonA;
	TGroupBox *GroupBox2;
	TButton *cleanButtonB;
	TMemo *memoInputMatrixB;
	TButton *rowEchelonButtonB;
	TButton *reducedRowEchelonButtonB;
	TButton *determinantButtonB;
	TButton *rankButtonB;
	TButton *inverseButtonB;
	TButton *multiplyButtonB;
	TEdit *constantSelectionBEdit;
	TButton *powerButtonB;
	TEdit *powerSelectionBEdit;
	TButton *transposeButtonB;
	void __fastcall outputClick(TObject *Sender);
private:	// User declarations
protected:	// User declarations
    vector<vector<double>> matrix;
public:		// User declarations
	__fastcall TForm1(TComponent* Owner);

	template<typename data_type1>
	const String to_unicodeString(const data_type1&) const;

	template<typename data_type2>
	const void print(const data_type2&, TMemo*) const;

	const string to_str(const String&) const;

	vector<vector<double>> inputMatrix(TMemo*) const;

	void outputMatrix(const vector<vector<double>>&, TMemo*) const;
};
//---------------------------------------------------------------------------
extern PACKAGE TForm1 *Form1;
//---------------------------------------------------------------------------
#endif
