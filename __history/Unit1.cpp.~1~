//---------------------------------------------------------------------------
#include <vcl.h>
#pragma hdrstop

#include "Unit1.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;
//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
	: TForm(Owner)
{
}
//---------------------------------------------------------------------------

vector<double> TForm1::split(const String& str, const char& separator)
{
	double temp = 0.0;
	String temp_str;
	vector<double> vec;

//	ShowMessage(str + "\n" + str.Length());

	for (int i = 1; i <= str.Length(); i++)
	{
		if(str[i] == separator && !temp_str.IsEmpty()) {
			temp = temp_str.ToDouble();
			vec.push_back(temp);
			temp_str.~UnicodeString();
		} else {
			temp_str += str[i];
		}
	}
	return vec;
}


void __fastcall TForm1::Button1Click(TObject *Sender)
{
	String text = Memo1->Text;
	vector<vector<double>> matrix;
	vector<int> num_of_values;

	int how_many = 0;
	double temp = 0.0;
	bool no_errors = true;
	String temp_str;
	vector<double> temp_vec;

	for (int i = 0; i < Memo1->Lines->Count; i++)
	{
		temp_str = Memo1->Lines->Strings[i];
		temp_vec = split(temp_str, ' ');
		matrix.push_back(temp_vec);
		num_of_values.push_back(temp_vec.size());
		temp_vec.clear();
	}

	vector<string> str;
	for (int i = 0; i < matrix.size(); i++) {
		stringstream s;
		for (int j = 0; j < num_of_values[i]; j++) {
			s << setw(12) << matrix[i][j];
		}
		str.push_back(s.str());
	}

	String output;
//	output.SetLength(str.length());
//	ShowMessage(output.Length());
	char a;
	for (int i = 0; i < str.size(); i++) {
		for (int j = 1; j <= str[i].length(); j++) {
			output += str[i][j];
		}
		output += "\n";
	}
	ShowMessage(output);





/*
	for (auto &i: matrix) {
		if (i.size() != matrix[0].size()) {
			cout << "\n\nThe number of values is not same in each row."
				 << "\nRelaunch the MATRIX CALCULATOR and try to enter the matrix properly.\n\n";
			INPUT::show_original_matrix();
			cout << endl << endl;
			no_errors = false;
			break;
		}
	}
	if (no_errors) {
		cout << "\n\nThe entered matrix is with " << matrix.size() << " row(s) and "
			 << matrix[0].size() << " column(s):" << endl;
		INPUT::show_original_matrix();
		cout << endl << endl;
	}
*/

}
//---------------------------------------------------------------------------
